
; 代码段描述符!!!!注意这里的定义是固定搭配，是由更底层的东西进行定义的，我们只能做到类似调参的效果。
;注意这里的代码一定一定要符合规范，
;!!!!!!!!!悟道了，在这里，dd,dw,db,其实可以对标int，long这种感觉，是定义了一个比如说dd就是两个字的变量
gdt_start: 
    ; 每一个描述符由8字节组成，这里使用两个双字 (dd, 每个双字4字节) 占位
    dd 0x0 ; 空描述符，占位用，第1个双字
    dd 0x0 ; 空描述符，占位用，第2个双字

; 代码段描述符
gdt_code:
    dw 0xffff    ; 段长度 (16位)，低16位
    dw 0x0       ; 段基地址 (16位)，低16位
    db 0x0       ; 段基地址 (8位)，中间8位
    db 10011010b ; 段标志：段类型(可执行)，内核模式，存在位等
    db 11001111b ; 高4位段标志(如G位和D位) + 段长度的高4位
    db 0x0       ; 段基地址 (8位)，高8位

; 数据段描述符，与代码段类似，但权限标志略有不同
gdt_data:
    dw 0xffff    ; 段长度 (16位)，低16位
    dw 0x0       ; 段基地址 (16位)，低16位
    db 0x0       ; 段基地址 (8位)，中间8位
    db 10010010b ; 段标志：不可执行，可读写，内核模式，存在位等
    db 11001111b ; 高4位段标志(如G位和D位) + 段长度的高4位
    db 0x0       ; 段基地址 (8位)，高8位

gdt_end: ; GDT结束标志，计算大小时会用到

; GDT描述符
gdt_descriptor:
    ; GDT大小(16位)，GDT表大小减1，符合GDT格式要求
    dw gdt_end - gdt_start - 1 
    ; GDT表的基地址(32位)，指向gdt_start
    dd gdt_start 

; 定义代码段和数据段的常量，供后续使用
CODE_SEG equ gdt_code - gdt_start ; 代码段选择子偏移
DATA_SEG equ gdt_data - gdt_start ; 数据段选择子偏移



; 保护模式的 GDT 引入了段保护机制，可以设置段的访问权限（例如只读、只执行等），保护不同程序或系统模块不被错误或恶意代码干扰。实模式则缺乏此功能